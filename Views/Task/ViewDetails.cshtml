@{
    if (ViewData["Role"].ToString().Equals("Manager"))
    {
        Layout = "_ResponsiveOperations";
    }
    else
    {
        Layout = "_ResponsiveEmployee";
    }
    ViewData["Title"] = "Task Details";
    ViewData["css"] = "viewDetails.css";

}

@using Task_Management.Models.Templete

@model WrapperTask

<style>
    .task {
        width: 61rem;
        margin-top: 5rem;
        margin-left: auto;
        height: fit-content;
        margin-right: auto;
        margin-bottom: 1rem;
    }

    .file {
        padding: 2rem;
    }

    .uploaded-file {
        width: fit-content;
        margin-left: 4rem;
        margin-top: 3rem;
        display: flex;
    }

    .task-img {
        padding: 4rem;
    }

    .task-title {
        position: absolute;
        top: 5rem;
        left: 14rem;
    }

    .vertical-line {
        border-left: 1px solid black;
        height: 164px;
        border-width: 4px;
        border-color: lightgray;
    }

    .radio-input input {
        display: none;
    }

    .radio-input {
        --container_width: 500px;
        position: relative;
        display: flex;
        align-items: center;
        border-radius: 10px;
        background-color: #fff;
        color: #000000;
        width: var(--container_width);
        overflow: hidden;
        border: 1px solid rgba(53, 52, 52, 0.226);
        margin-left: auto;
        margin-right: auto;
        margin-top: 4rem;
    }

        .radio-input label {
            width: 100%;
            padding: 10px;
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1;
            font-weight: 600;
            letter-spacing: -1px;
            font-size: 14px;
        }

    .selection {
        display: none;
        position: absolute;
        height: 100%;
        width: calc(var(--container_width) / 3);
        z-index: 0;
        left: 0;
        top: 0;
        transition: .15s ease;
    }

    .radio-input label:has(input:checked) {
        color: #fff;
    }

        .radio-input label:has(input:checked) ~ .selection {
            background-color: rgb(11 117 223);
            display: inline-block;
        }

    .radio-input label:nth-child(1):has(input:checked) ~ .selection {
        transform: translateX(calc(var(--container_width) * 0/3));
    }

    .radio-input label:nth-child(2):has(input:checked) ~ .selection {
        transform: translateX(calc(var(--container_width) * 1/3));
    }

    .radio-input label:nth-child(3):has(input:checked) ~ .selection {
        transform: translateX(calc(var(--container_width) * 2/3));
    }

    .tab {
        display: none;
    }

    .chat-card {
        margin-top: 4rem;
        width: 90%;
        margin-left: auto;
        margin-right: auto;
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);
    }

    .chat-header {
        background-color: #004CFF;
        color: #fff;
        padding: 10px;
        font-size: 18px;
        border-top-left-radius: 5px;
        border-top-right-radius: 5px;
    }

    .chat-window {
        height: 23rem;
        overflow-y: scroll;
        padding: 1rem;
    }

    .message-list {
        list-style: none;
        margin: 0;
        padding: 0;
    }

    .chat-input {
        display: flex;
        align-items: center;
        padding: 10px;
        border-top: 1px solid #ccc;
    }

    .message-input {
        flex: 1;
        border: none;
        outline: none;
        padding: 5px;
        font-size: 14px;
    }

    .send-button {
        border: none;
        outline: none;
        background-color: #004CFF;
        color: #fff;
        font-size: 14px;
        padding: 5px 10px;
        cursor: pointer;
    }

        .send-button:hover {
            background-color: rgb(255, 255, 255);
            color: rgb(0, 0, 0);
            box-shadow: 0 4px 18px 0 rgba(0, 0, 0, 0.25);
        }

    .table-tab {
        width: 42rem;
        height: fit-content;
        margin-left: auto;
        margin-right: auto;
        margin-bottom: 2rem;
        margin-top: 4rem;
        padding:1rem;
    }

    .message {
        margin-top: 11rem;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .message-text {
        margin-top: 6px;
        margin-bottom: 10px;
        background: lightgrey;
        margin-inline: 1rem;
        max-width:fit-content;
        padding: 17px;
        border-radius: 2rem;
        font-size: 16px;
        word-break:break-word
    }

    #message-direction {
        display: flex;
        justify-content: flex-end;
        margin-left: auto;
    }

</style>

<div class="radio-input">
    <label>
        <input type="radio" id="task" onchange="changeLabel(this.id)" name="value-radio" value="value-1">
        <span>Task Details</span>
    </label>
    <label>
        <input type="radio" id="employees" onchange="changeLabel(this.id)" name="value-radio" value="value-2">
        <span>Employee Details</span>
    </label>
    <label>
        <input type="radio" id="chat" onchange="changeLabel(this.id)" name="value-radio" value="value-3">
        <span>Chat</span>
    </label>
    <span class="selection"></span>
</div>


<div id="task" class="tab task card">
    <div class="task-img">
        <img style="height:7rem" src="~/images/task.png" />
    </div>
    <div class="task-title">
        <label style="font-size: xxx-large;
    font-family: sans-serif;
    font-weight: bold;
    ">@Model.tasksEmployees.tasks.Title</label>
    </div>
    <label style="font-size: initial;
    font-style: oblique;
    font-family: serif;
    padding-left: 3rem;
    position: absolute;
    top: 13rem;
    left: 1rem;">Created Date: @Model.tasksEmployees.tasks.createdDate</label>
    <br />
    <div class="description">
        <label style="padding-inline: 4rem;overflow-wrap: anywhere;">@Model.tasksEmployees.tasks.Description</label>
    </div>

    <div class="uploaded-file card">
        <a style="text-decoration: none;
    display: flex;" href="@Url.Action("DownloadFile" , "Task" , new {taskId = Model.tasksEmployees.tasks.taskId})">
            <div class="file">
                <img height="100px" width="100px" src="~/images/documents.png" />
            </div>
            <div class="vertical-line"></div>
            <div>
                <label style="    margin: 4rem;
    font-size: x-large;
    color: darkslategray;">@Model.tasksEmployees.tasks.fileName</label>
            </div>
        </a>
    </div>
</div>

<div id="employees" class="tab table-tab card">
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Sno</th>
                <th scope="col">Employee Id</th>
                <th scope="col">Employee Name</th>
                <th scope="col">Email Id</th>
            </tr>
        </thead>
        <tbody>
            @{
                int index = 0;
            }
            @foreach (Employee employee in Model.tasksEmployees.employees as IEnumerable<Employee>)
            {
                <tr>
                    @{
                        index++;
                    }
                    <th scope="row">@index</th>
                    <td>@employee.employeeId</td>
                    <td>@employee.employeeName</td>
                    <td>@employee.emailId</td>
                </tr>
            }
        </tbody>
    </table>
</div>



<div id="chat" class="tab chat-card card">
    <div class="chat-header">Chat</div>
    <div hidden>
        <input type="text" value="@Model.tasksEmployees.tasks.taskId" id="taskId" />
    </div>
    <div id="scroll" class="chat-window">
    </div>
    <div class="chat-input">
        <input id="chat-message" type="text" class="message-input" placeholder="Type your message here">
        <button onclick="sendForm()" class="send-button">Send</button>
    </div>
</div>


<script>
    const userId = @Html.Raw(Json.Serialize(ViewBag.userId));

    document.addEventListener('DOMContentLoaded', function () {
        const taskDiv = document.querySelector('.tab');
        const taskRadio = document.getElementById('task');

        taskDiv.style.display = 'block';
        taskRadio.checked = true;

        fetchChatMessages();

    });

    function changeLabel(id) {
        const cards = document.querySelectorAll('.tab');

        cards.forEach(card => {
            card.style.display = "none";
        });

        const tag = document.querySelector(`div[id="${id}"]`);
        tag.style.display = "block";
    }

    async function updateChatMessage(messages) {
        var chatWindow = $('.chat-window');


        if (!Array.isArray(messages)) {
            messages = [messages];
        }
        else {
            chatWindow.empty();
        }

        for (var i = messages.length - 1; i >= 0; i--) {
            var message = messages[i];

            let personName;
            var id;
            var formattedMessage = "";

            if (message.personId === userId) {
                id = "message-direction";
                formattedMessage = `<div id= ${id} class="message-text">`;
            }
            else {
                id = "null";
                try {
                    personName = await fetchChatPerson(message.personId);
                    formattedMessage = `<div id= ${id} class="message-text">
                            <div style="font-weight:bold">${personName}</div>`;
                }
                catch (error) {
                    console.log("Error : ", error.message);
                }
            }

            formattedMessage += `<div>${message.message}</div></div>`;

            chatWindow.append(formattedMessage);
        }


    }

    async function fetchChatPerson(id) {
        try {
            const response = await $.ajax({
                url: '@Url.Action("GetChatPerson" , "Task")',
                type: 'POST',
                datatype: 'json',
                data: { personId: id }
            });

            return response;
        }
        catch (error) {
            throw new Error("Failed to fetch data from the server");
        }
    }

    function fetchChatMessages() {
        var chatWindow = $('.chat-window');

        $.ajax({
            url: '@Url.Action("ViewChats" , "Task" , new {taskId = Model.tasksEmployees.tasks.taskId})',
            type: 'GET',
            datatype: 'json',
            success: function (data) {
                if (typeof data !== 'string') {
                    updateChatMessage(data);
                }
                else {
                    chatWindow.empty();
                    var formatedMessage = `<div class="message" >${data}</div>`;
                    chatWindow.append(formatedMessage);
                }
            },
            error: function () {
                var formatedMessage = '<div class="message" >Error in Reteriving Data</div>';
                chatWindow.append(formatedMessage);
            }
        });
    }

    function sendForm() {

        const message = document.getElementById("chat-message");
        const id = @Html.Raw(Json.Serialize(Model.tasksEmployees.tasks.taskId));

        $.ajax({
            url: '@Url.Action("InsertChat","Task")',
            type: 'POST',
            data: { message: message.value , taskId : id },
            datatype: 'json',
            success: function (data) {
                message.value = "";
                updateChatMessage(data);
            }
        });
    }
</script>

